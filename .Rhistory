library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
install.packages("shinyWidgets")
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
install.packages("jpeg")
library(jpeg)
?readJPEG
intro_banner <- readJPEG("www/intro_banner.JPEG")
intro_banner <- readJPEG("www/intro_banner.JPG")
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Repositories/AAC_Analysis")
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
# launch the shiny app
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
runApp()
runApp()
runApp()
runApp()
runApp()
# load ui and server files
source("app_ui.R")
source("app_server.R")
runApp()
runApp()
runApp()
# load the necessary package
library(shiny)
# load ui and server files
source("app_ui.R")
source("app_server.R")
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("rsconnect")
library("rsconnect")
rsconnect::setAccountInfo(name='adngo',
token='25C6996F78ED5053D578AEC334197DF4',
secret='<SECRET>')
#install.packages("rsconnect")
library("rsconnect")
rsconnect::setAccountInfo(name='adngo',
token='25C6996F78ED5053D578AEC334197DF4',
secret='xAmTNdqgi9XGSa4IAl0fcKU6WxhVEHy9pCqLuXW0')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
